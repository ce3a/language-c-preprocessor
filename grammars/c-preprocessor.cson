'scopeName': 'source.c-preprocessor'
'fileTypes': []
'name': 'C Preprocessor'

patterns: [
  {
    'include': '#preprocessor-rule-enabled'
  }
  {
    'include': '#preprocessor-rule-disabled'
  }
  {
    'include': '#preprocessor-rule-conditional'
  }
  {
    'include': '#preprocessor-defines'
  }
  {
    'include': '#preprocessor-diagnostis'
  }
  {
    'include': '#preprocessor-includes'
  }
  {
    'include': '#preprocessor-line-directives'
  }
  {
    'include': '#preprocessor-pragmas'
  }
  {
    'include': '#comments'
  }
  {
    'include': '#operators'
  }
  {
    'include': '#numbers'
  }
  {
    'include': '#strings'
  }
  {
    'include': '#pragma-mark'
  }
  {
    'include': '#parens'
  }
  {
    'include': '#line_continuation_character'
  }
  {
    'match': ','
    'name': 'punctuation.separator.delimiter.c'
  }
]
repository:
  'preprocessor-defines':
    'patterns': [
      {
        'begin': '''(?x)
          ^\\s* ((\\#)\\s*define) \\s+    # define
          ((?<id>[a-zA-Z_$][\\w$]*))      # macro name
          (?:
            (\\()
              (
                \\s* \\g<id> \\s*         # first argument
                ((,) \\s* \\g<id> \\s*)*  # additional arguments
                (?:\\.\\.\\.)?            # varargs ellipsis?
              )
            (\\))
          )?
        '''
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.define.c'
          '2':
            'name': 'punctuation.definition.directive.c'
          '3':
            'name': 'entity.name.function.preprocessor.c'
          '5':
            'name': 'punctuation.definition.parameters.begin.c'
          '6':
            'name': 'variable.parameter.preprocessor.c'
          '8':
            'name': 'punctuation.separator.parameters.c'
          '9':
            'name': 'punctuation.definition.parameters.end.c'
        'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
        'name': 'meta.preprocessor.macro.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-define-line-contents'
          }
        ]
      }
      {
        'begin': '^\\s*(?:((#)\\s*undef))\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.undef.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
        'name': 'meta.preprocessor.c'
        'patterns': [
          {
            'match': '[a-zA-Z_$][\\w$]*'
            'name': 'entity.name.function.preprocessor.c'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
    ]
  'preprocessor-diagnostis':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*(error|warning))\\b'
        'captures':
          '1':
            'name': 'keyword.control.directive.diagnostic.$3.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '(?<!\\\\)(?=\\n)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))'
        'name': 'meta.preprocessor.diagnostic.c'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'include': '#strings'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
    ]
  'preprocessor-includes':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*'
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.$3.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
        'name': 'meta.preprocessor.include.c'
        'patterns': [
          {
            'include': '#line_continuation_character'
          }
          {
            'begin': '"'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.string.begin.c'
            'end': '"'
            'endCaptures':
              '0':
                'name': 'punctuation.definition.string.end.c'
            'name': 'string.quoted.double.include.c'
          }
          {
            'begin': '<'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.string.begin.c'
            'end': '>'
            'endCaptures':
              '0':
                'name': 'punctuation.definition.string.end.c'
            'name': 'string.quoted.other.lt-gt.include.c'
          }
        ]
      }
    ]
  'preprocessor-line-directives':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*line)\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.line.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
        'name': 'meta.preprocessor.c'
        'patterns': [
          {
            'include': '#strings'
          }
          {
            'include': '#numbers'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
    ]
  'preprocessor-pragmas':
    'patterns': [
      {
        'begin': '^\\s*(?:((#)\\s*pragma))\\b'
        'beginCaptures':
          '1':
            'name': 'keyword.control.directive.pragma.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '(?=(?://|/\\*))|(?<!\\\\)(?=\\n)'
        'name': 'meta.preprocessor.pragma.c'
        'patterns': [
          {
            'include': '#strings'
          }
          {
            'match': '[a-zA-Z_$][\\w\\-$]*'
            'name': 'entity.other.attribute-name.pragma.preprocessor.c'
          }
          {
            'include': '#numbers'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.block.c'
        'match': '^/\\* =(\\s*.*?)\\s*= \\*/$\\n?'
        'name': 'comment.block.c'
      }
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.c'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.c'
        'name': 'comment.block.c'
      }
      {
        'match': '\\*/.*\\n'
        'name': 'invalid.illegal.stray-comment-end.c'
      }
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.line.c'
        'match': '^// =(\\s*.*?)\\s*=\\s*$\\n?'
        'name': 'comment.line.banner.cpp'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.cpp'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.cpp'
            'end': '(?=\\n)'
            'name': 'comment.line.double-slash.cpp'
            'patterns': [
              {
                'include': '#line_continuation_character'
              }
            ]
          }
        ]
      }
    ]
  'disabled':
    # Consume nested preprocessor if(def)s
    'begin': '^\\s*#\\s*if(n?def)?\\b.*$'
    'end': '^\\s*#\\s*endif\\b'
    'patterns': [
      {
        'include': '#disabled'
      }
      {
        'include': '#pragma-mark'
      }
    ]
  'line_continuation_character':
    'patterns': [
      {
        'match': '(\\\\)\\n'
        'captures':
          '1':
            'name': 'constant.character.escape.line-continuation.c'
      }
    ]
  'numbers':
    'patterns': [
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F\']*[0-9a-fA-F])?)|(0(b|B)[01]([01\']*[01])?)|(([0-9]([0-9\']*[0-9])?\\.?[0-9]*([0-9\']*[0-9])?)|(\\.[0-9]([0-9\']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9\']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
        'name': 'constant.numeric.c'
      }
    ]
  'parens':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.parens.begin.bracket.round.c'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.parens.end.bracket.round.c'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'parens-block':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.section.parens.begin.bracket.round.c'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.section.parens.end.bracket.round.c'
    'patterns': [
      {
        'include': '#block_innards'
      }
    ]
  'pragma-mark':
    'captures':
      '1':
        'name': 'meta.preprocessor.pragma.c'
      '2':
        'name': 'keyword.control.directive.pragma.pragma-mark.c'
      '3':
        'name': 'punctuation.definition.directive.c'
      '4':
        'name': 'entity.name.tag.pragma-mark.c'
    'match': '^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))'
    'name': 'meta.section'
  'operators':
    'patterns': [
      {
        'match': '(?<![\\w$])(sizeof)(?![\\w$])'
        'name': 'keyword.operator.sizeof.c'
      }
      {
        'match': '--'
        'name': 'keyword.operator.decrement.c'
      }
      {
        'match': '\\+\\+'
        'name': 'keyword.operator.increment.c'
      }
      {
        'match': '%=|\\+=|-=|\\*=|(?<!\\()/='
        'name': 'keyword.operator.assignment.compound.c'
      }
      {
        'match': '&=|\\^=|<<=|>>=|\\|='
        'name': 'keyword.operator.assignment.compound.bitwise.c'
      }
      {
        'match': '<<|>>'
        'name': 'keyword.operator.bitwise.shift.c'
      }
      {
        'match': '!=|<=|>=|==|<|>'
        'name': 'keyword.operator.comparison.c'
      }
      {
        'match': '&&|!|\\|\\|'
        'name': 'keyword.operator.logical.c'
      }
      {
        'match': '&|\\||\\^|~'
        'name': 'keyword.operator.c'
      }
      {
        'match': '='
        'name': 'keyword.operator.assignment.c'
      }
      {
        'match': '%|\\*|/|-|\\+'
        'name': 'keyword.operator.c'
      }
      {
        'begin': '\\?'
        'beginCaptures':
          '0':
            'name': 'keyword.operator.ternary.c'
        'end': ':'
        'applyEndPatternLast': true # To prevent matching C++ namespace access ::
        'endCaptures':
          '0':
            'name': 'keyword.operator.ternary.c'
        'patterns': [
          {
            'include': '$base'
          }
        ]
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.c'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.c'
        'name': 'string.quoted.double.c'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#string_placeholder'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.c'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.c'
        'name': 'string.quoted.single.c'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
    ]
  'string_escaped_char':
    'patterns': [
      {
        'match': '''(?x)\\\\ (
            \\\\             |
            [abefnprtv'"?]   |
            [0-3]\\d{,2}     |
            [4-7]\\d?        |
            x[a-fA-F0-9]{,2} |
            u[a-fA-F0-9]{,4} |
            U[a-fA-F0-9]{,8} )
        '''
        'name': 'constant.character.escape.c'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unknown-escape.c'
      }
    ]
  'vararg_ellipses':
    'match': '(?<!\\.)\\.\\.\\.(?!\\.)'
    'name': 'punctuation.vararg-ellipses.c'
  'preprocessor-rule-conditional':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*if(?:n?def)?\\b)'
        'beginCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '^\\s*((#)\\s*endif\\b)'
        'endCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'patterns': [
          {
            'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
            'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
            'name': 'meta.preprocessor.c'
            'patterns': [
              {
                'include': '#preprocessor-rule-conditional-line'
              }
            ]
          }
          #NEVER CHANGE THE ORDER OF THE FOLLOWING INCLUDES!!!
          #Their order provides commenting logic
          {
            'include': '#preprocessor-rule-enabled-elif'
          }
          {
            'include': '#preprocessor-rule-enabled-else'
          }
          {
            'include': '#preprocessor-rule-disabled-elif'
          }
          {
            'begin': '^\\s*((#)\\s*elif\\b)'
            'beginCaptures':
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
            'name': 'meta.preprocessor.c'
            'patterns': [
              {
                'include': '#preprocessor-rule-conditional-line'
              }
            ]
          }
          {
            'include': '$base'
          }
        ]
      }
      {
        'match': '^\\s*#\\s*(else|elif|endif)\\b'
        'captures':
          '0':
            'name': 'invalid.illegal.stray-$1.c'
      }
    ]
  'preprocessor-rule-conditional-block':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*if(?:n?def)?\\b)'
        'beginCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '^\\s*((#)\\s*endif\\b)'
        'endCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'patterns': [
          {
            'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
            'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
            'name': 'meta.preprocessor.c'
            'patterns': [
              {
                'include': '#preprocessor-rule-conditional-line'
              }
            ]
          }
          {
            'include': '#preprocessor-rule-enabled-elif-block'
          }
          {
            'include': '#preprocessor-rule-enabled-else-block'
          }
          {
            'include': '#preprocessor-rule-disabled-elif'
          }
          {
            'begin': '^\\s*((#)\\s*elif\\b)'
            'beginCaptures':
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
            'name': 'meta.preprocessor.c'
            'patterns': [
              {
                'include': '#preprocessor-rule-conditional-line'
              }
            ]
          }
          {
            'include': '#block_innards'
          }
        ]
      }
      {
        'match': '^\\s*#\\s*(else|elif|endif)\\b'
        'captures':
          '0':
            'name': 'invalid.illegal.stray-$1.c'
      }
    ]
  'preprocessor-rule-conditional-line':
    'patterns': [
      {
        #the valid "defined" keyword usage
        'match': '(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))'
        'name': 'keyword.control.directive.conditional.c'
      }
      {
        #consume prohibited macro names
        'match': '\\bdefined\\b'
        'name': 'invalid.illegal.macro-name.c'
      }
      {
        'include': '#comments'
      }
      {
        'include': '#strings'
      }
      {
        'include': '#numbers'
      }
      {
        #Catch ternary operators here and implement a custom one
        'begin': '\\?'
        'beginCaptures':
          '0':
            'name': 'keyword.operator.ternary.c'
        'end': ':'
        'endCaptures':
          '0':
            'name': 'keyword.operator.ternary.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-conditional-line'
          }
        ]
      }
      {
        'include': '#operators'
      }
      {
        'match': '\\b(NULL|true|false|TRUE|FALSE)\\b'
        'name': 'constant.language.c'
      }
      {
        'match': '[a-zA-Z_$][\\w$]*'
        'name': 'entity.name.function.preprocessor.c'
      }
      {
        'include': '#line_continuation_character'
      }
      {
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.section.parens.begin.bracket.round.c'
        'end': '\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.parens.end.bracket.round.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-conditional-line'
          }
        ]
      }
    ]
  'preprocessor-rule-disabled':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))'
        'beginCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '^\\s*((#)\\s*endif\\b)'
        'endCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'patterns': [
          {
            'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
            'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)'
            'name': 'meta.preprocessor.c'
            'patterns': [
              {
                'include': '#preprocessor-rule-conditional-line'
              }
            ]
          }
          {
            'include': '#comments'
          }
          {
            'include': '#preprocessor-rule-enabled-elif'
          }
          {
            'include': '#preprocessor-rule-enabled-else'
          }
          {
            'include': '#preprocessor-rule-disabled-elif'
          }
          {
            'begin': '^\\s*((#)\\s*elif\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))'
            'patterns': [
              {
                'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
                'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
                'name': 'meta.preprocessor.c'
                'patterns': [
                  {
                    'include': '#preprocessor-rule-conditional-line'
                  }
                ]
              }
              {
                'include': '$base'
              }
            ]
          }
          {
            'begin': '\\n'
            'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
            'contentName': 'comment.block.preprocessor.if-branch.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
        ]
      }
    ]
  'preprocessor-rule-disabled-block':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))'
        'beginCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '^\\s*((#)\\s*endif\\b)'
        'endCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'patterns': [
          {
            'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
            'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)'
            'name': 'meta.preprocessor.c'
            'patterns': [
              {
                'include': '#preprocessor-rule-conditional-line'
              }
            ]
          }
          {
            'include': '#comments'
          }
          {
            'include': '#preprocessor-rule-enabled-elif-block'
          }
          {
            'include': '#preprocessor-rule-enabled-else-block'
          }
          {
            'include': '#preprocessor-rule-disabled-elif'
          }
          {
            'begin': '^\\s*((#)\\s*elif\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))'
            'patterns': [
              {
                'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
                'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
                'name': 'meta.preprocessor.c'
                'patterns': [
                  {
                    'include': '#preprocessor-rule-conditional-line'
                  }
                ]
              }
              {
                'include': '#block_innards'
              }
            ]
          }
          {
            'begin': '\\n'
            'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
            'contentName': 'comment.block.preprocessor.if-branch.in-block.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
        ]
      }
    ]
  'preprocessor-rule-disabled-elif':
    'begin': '^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))'
    'beginCaptures':
      '0':
        'name': 'meta.preprocessor.c'
      '1':
        'name': 'keyword.control.directive.conditional.c'
      '2':
        'name': 'punctuation.definition.directive.c'
    'end': '(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))'
    'patterns': [
      {
        'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
        'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
        'name': 'meta.preprocessor.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-conditional-line'
          }
        ]
      }
      {
        'include': '#comments'
      }
      {
        'begin': '\\n'
        'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
        'contentName': 'comment.block.preprocessor.elif-branch.c'
        'patterns': [
          {
            'include': '#disabled'
          }
          {
            'include': '#pragma-mark'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))'
        'beginCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
          '3':
            'name': 'constant.numeric.preprocessor.c'
        'end': '^\\s*((#)\\s*endif\\b)'
        'endCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'patterns': [
          {
            'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
            'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)'
            'name': 'meta.preprocessor.c'
            'patterns': [
              {
                'include': '#preprocessor-rule-conditional-line'
              }
            ]
          }
          {
            'include': '#comments'
          }
          {
            'begin': '^\\s*((#)\\s*else\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*endif\\b))'
            'contentName': 'comment.block.preprocessor.else-branch.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
          {
            'begin': '^\\s*((#)\\s*elif\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
            'contentName': 'comment.block.preprocessor.if-branch.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
          {
            'begin': '\\n'
            'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
            'patterns': [
              {
                'include': '$base'
              }
            ]
          }
        ]
      }
    ]
  'preprocessor-rule-enabled-block':
    'patterns': [
      {
        'begin': '^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))'
        'beginCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'end': '^\\s*((#)\\s*endif\\b)'
        'endCaptures':
          '0':
            'name': 'meta.preprocessor.c'
          '1':
            'name': 'keyword.control.directive.conditional.c'
          '2':
            'name': 'punctuation.definition.directive.c'
        'patterns': [
          {
            'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
            'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)'
            'name': 'meta.preprocessor.c'
            'patterns': [
              {
                'include': '#preprocessor-rule-conditional-line'
              }
            ]
          }
          {
            'include': '#comments'
          }
          {
            'begin': '^\\s*((#)\\s*else\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*endif\\b))'
            'contentName': 'comment.block.preprocessor.else-branch.in-block.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
          {
            'begin': '^\\s*((#)\\s*elif\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
            'contentName': 'comment.block.preprocessor.if-branch.in-block.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
          {
            'begin': '\\n'
            'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
            'patterns': [
              {
                'include': '#block_innards'
              }
            ]
          }
        ]
      }
    ]
  'preprocessor-rule-enabled-elif':
    'begin': '^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))'
    'beginCaptures':
      '0':
        'name': 'meta.preprocessor.c'
      '1':
        'name': 'keyword.control.directive.conditional.c'
      '2':
        'name': 'punctuation.definition.directive.c'
    'end': '(?=^\\s*((#)\\s*endif\\b))'
    'patterns': [
      {
        'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
        'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
        'name': 'meta.preprocessor.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-conditional-line'
          }
        ]
      }
      {
        'include': '#comments'
      }
      {
        'begin': '\\n'
        'end': '(?=^\\s*((#)\\s*(?:endif)\\b))'
        'patterns': [
          {
            'begin': '^\\s*((#)\\s*(else)\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*endif\\b))'
            'contentName': 'comment.block.preprocessor.elif-branch.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
          {
            'begin': '^\\s*((#)\\s*(elif)\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
            'contentName': 'comment.block.preprocessor.elif-branch.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
          {
            'include': '$base'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled-elif-block':
    'begin': '^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))'
    'beginCaptures':
      '0':
        'name': 'meta.preprocessor.c'
      '1':
        'name': 'keyword.control.directive.conditional.c'
      '2':
        'name': 'punctuation.definition.directive.c'
    'end': '(?=^\\s*((#)\\s*endif\\b))'
    'patterns': [
      {
        'begin': '\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))'
        'end': '(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)'
        'name': 'meta.preprocessor.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-conditional-line'
          }
        ]
      }
      {
        'include': '#comments'
      }
      {
        'begin': '\\n'
        'end': '(?=^\\s*((#)\\s*(?:endif)\\b))'
        'patterns': [
          {
            'begin': '^\\s*((#)\\s*(else)\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*endif\\b))'
            'contentName': 'comment.block.preprocessor.elif-branch.in-block.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
          {
            'begin': '^\\s*((#)\\s*(elif)\\b)'
            'beginCaptures':
              '0':
                'name': 'meta.preprocessor.c'
              '1':
                'name': 'keyword.control.directive.conditional.c'
              '2':
                'name': 'punctuation.definition.directive.c'
            'end': '(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))'
            'contentName': 'comment.block.preprocessor.elif-branch.c'
            'patterns': [
              {
                'include': '#disabled'
              }
              {
                'include': '#pragma-mark'
              }
            ]
          }
          {
            'include': '#block_innards'
          }
        ]
      }
    ]
  'preprocessor-rule-enabled-else':
    'begin': '^\\s*((#)\\s*else\\b)'
    'beginCaptures':
      '0':
        'name': 'meta.preprocessor.c'
      '1':
        'name': 'keyword.control.directive.conditional.c'
      '2':
        'name': 'punctuation.definition.directive.c'
    'end': '(?=^\\s*((#)\\s*endif\\b))'
    'patterns': [
      {
        'include': '$base'
      }
    ]
  'preprocessor-rule-enabled-else-block':
    'begin': '^\\s*((#)\\s*else\\b)'
    'beginCaptures':
      '0':
        'name': 'meta.preprocessor.c'
      '1':
        'name': 'keyword.control.directive.conditional.c'
      '2':
        'name': 'punctuation.definition.directive.c'
    'end': '(?=^\\s*((#)\\s*endif\\b))'
    'patterns': [
      {
        'include': '#block_innards'
      }
    ]
  'preprocessor-rule-define-line-contents':
    'patterns': [
      {
        'include': '#vararg_ellipses'
      }
      {
        # block pattern for #define lines (terminates at newline w/o line_continuation_character)
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.bracket.curly.c'
        'end': '}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.bracket.curly.c'
        'name': 'meta.block.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-define-line-blocks'
          }
        ]
      }
      {
        'match': '\\('
        'name': 'punctuation.section.parens.begin.bracket.round.c'
      }
      {
        'match': '\\)'
        'name': 'punctuation.section.parens.end.bracket.round.c'
      }
      {
        # Function scope patterns for #define lines (terminates at newline w/o line_continuation_character)
        # FIRST CAPTURE meta.function.c scope (provides an injectable scope, balanced parentheses and prevents unnecessary scope nesting)
        'begin': '''(?x)
          (?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()
          (?=
            (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name
            |
            (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(
          )
        '''
        'end': '(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)'
        'name': 'meta.function.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-define-line-functions'
          }
        ]
      }
      {
        # double quoted string patterns for #define lines (terminates at newline w/o line_continuation_character)
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.c'
        'end': '"|(?<!\\\\)(?=\\s*\\n)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.c'
        'name': 'string.quoted.double.c'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#string_placeholder'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
      {
        # single quoted string patterns for #define lines (terminates at newline w/o line_continuation_character)
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.c'
        'end': '\'|(?<!\\\\)(?=\\s*\\n)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.c'
        'name': 'string.quoted.single.c'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#line_continuation_character'
          }
        ]
      }
      {
        'include': '$base'
      }
    ]
  'preprocessor-rule-define-line-blocks':
    'patterns': [
      {
        # Prevent unnecessary nesting of meta.block.c scope
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.bracket.curly.c'
        'end': '}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.bracket.curly.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-define-line-blocks'
          }
          {
            'include': '#preprocessor-rule-define-line-contents'
          }
        ]
      }
      {
        'include': '#preprocessor-rule-define-line-contents'
      }
    ]
  'preprocessor-rule-define-line-functions':
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#vararg_ellipses'
      }
      {
        'include': '#operators'
      }
      {
        # Function patterns in #define lines (terminates at newline w/o line_continuation_character)
        'begin': '''(?x)
          (?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()
          (
          (?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name
          |
          (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))
          )
          \\s*(\\()
        '''
        'beginCaptures':
          '1':
            'name': 'entity.name.function.c'
          '2':
            'name': 'punctuation.section.arguments.begin.bracket.round.c'
        'end': '(\\))|(?<!\\\\)(?=\\s*\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.section.arguments.end.bracket.round.c'
        'patterns': [
          {
            'include': '#preprocessor-rule-define-line-functions'
          }
        ]
      }
      {
        # Capture parentheses (terminates at newline w/o line_continuation_character)
        'begin': '\\('
        'beginCaptures':
          '0':
            'name': 'punctuation.section.parens.begin.bracket.round.c'
        'end': '(\\))|(?<!\\\\)(?=\\s*\\n)'
        'endCaptures':
          '1':
            'name': 'punctuation.section.parens.end.bracket.round.c'
        'patterns': [
          {
            # Provides right matching of inner parentheses
            'include': '#preprocessor-rule-define-line-functions'
          }
        ]
      }
      {
        'include': '#preprocessor-rule-define-line-contents'
      }
    ]
